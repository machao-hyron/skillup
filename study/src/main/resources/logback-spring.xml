<?xml version="1.0" encoding="UTF-8"?>
<!--scan默认值为true，表示配置文件如果发生改变，将会被重新加载-->
<!--scanPeriod 当上述scan参数为true时，此属性才生效，设置时间间隔，用来监测配置文件是否有被修改，单位默认是毫秒，默认的时间间隔是1分钟 -->
<!--debug 默认值为false，当此属性设置为true时，将打印出logback内部日志信息，实时查看logback内部运行状态-->
<configuration scan="true" scanPeriod="300 seconds" debug="false">
    <!-- 定义参数参数  -->
    <!-- TRACE<DEBUG<INFO<WRAN<ERROR -->
    <property name="log.level" value="debug"/>
    <property name="log.maxHistory" value="30"/>
    <property name="log.filePath" value="E:/hyron/Lihongwei/study"/>
    <property name="log.pattern"
              value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} -%msg%n"/>
    <!-- 控制台设置 -->
    <appender name="consoleAppender" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${log.pattern}</pattern>
        </encoder>
    </appender>
    <!-- DEBUG -->
    <appender name="debugAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 文件路径 -->
        <file>${log.filePath}/logs/debug.log</file>
        <!-- 滚动策略 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 文件名称 -->
            <fileNamePattern>
                ${log.filePath}/logs/debug/debug.%d{yyyy-MM-dd}.log.gz
            </fileNamePattern>
            <!-- 文件最大保存历史数量 -->
            <maxHistory>${log.maxHistory}</maxHistory>
        </rollingPolicy>

        <encoder>
            <pattern>${log.pattern}</pattern>
        </encoder>
        <!-- 过滤器（仅保留debug优先级的日志信息） -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- INFO -->
    <appender name="infoAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 文件路径 -->
        <file>${log.filePath}/logs/info.log</file>
        <!-- 滚动策略 -->
        <!-- TimeBasedRollingPolicy按照时间拆分日志文件-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 文件名称 -->
            <fileNamePattern>
                <!-- %d表示按天拆分文件，即每天新生成一个日志文件 -->
                ${log.filePath}/logs/info/info.%d{yyyy-MM-dd}.log.gz
            </fileNamePattern>
            <!-- 文件最大保存历史数量 -->
            <maxHistory>${log.maxHistory}</maxHistory>
        </rollingPolicy>

        <encoder>
            <pattern>${log.pattern}</pattern>
        </encoder>
        <!-- 过滤器（仅保留info优先级的日志信息） -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- ERROR -->
    <appender name="errorAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 文件路径 -->
        <file>${log.filePath}/logs/error.log</file>
        <!-- 滚动策略 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 文件名称 -->
            <fileNamePattern>
                ${log.filePath}/logs/error/error.%d{yyyy-MM-dd}.log.gz
            </fileNamePattern>
            <!-- 文件最大保存历史数量 -->
            <maxHistory>${log.maxHistory}</maxHistory>
        </rollingPolicy>

        <encoder>
            <pattern>${log.pattern}</pattern>
        </encoder>
        <!-- 过滤器（仅保留error优先级的日志信息） -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>
    <!--根root logger-->
    <root level="info">
        <appender-ref ref="consoleAppender"/>
        <appender-ref ref="debugAppender"/>
        <appender-ref ref="infoAppender"/>
        <appender-ref ref="errorAppender"/>
    </root>
</configuration>